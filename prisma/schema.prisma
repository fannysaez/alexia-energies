generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id               String         @id @default(cuid())
  titre            String
  slug             String         @unique
  auteur           String
  dateCreation     DateTime       @default(now())
  dateModification DateTime       @updatedAt
  datePublication  DateTime?
  statut           String         @default("brouillon")
  contenu          String
  image            String?
  imageCouverture  String?
  categoryId       String?
  description      String?
  views            Int            @default(0)
  category         Category?      @relation(fields: [categoryId], references: [id])
  contentBlocks    ContentBlock[]
  paragraphs       Paragraph[]
  favorites        Favorite[] // ðŸ‘ˆ relation ajoutÃ©e

  @@map("articles")
}

model ContentBlock {
  id          String    @id @default(cuid())
  order       Int
  type        BlockType @map("block_type")
  textContent String?   @map("text_content")
  mediaUrl    String?   @map("media_url")
  altText     String?   @map("alt_text")
  articleId   String
  titleLevel  String?
  article     Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("content_blocks")
}

model Newsletter {
  id              String   @id @default(cuid())
  email           String   @unique
  dateInscription DateTime @default(now())

  @@map("newsletters")
}

model Paragraph {
  id         String  @id @default(cuid())
  ordre      Int
  titre      String?
  texte      String?
  image_url  String?
  image_url2 String?
  alt_text   String?
  article_id String
  articles   Article @relation(fields: [article_id], references: [id], map: "paragraphs_articleId_fkey")

  @@map("paragraphs")
}

model Admin {
  id               String    @id @default(cuid())
  firstName        String    @default("admin")
  email            String    @unique
  password         String
  dateInscription  DateTime  @default(now())
  role             String    @default("admin")
  resetToken       String?
  resetTokenExpiry DateTime?

  @@map("admin")
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  firstname        String
  password         String
  role             String    @default("user")
  resetToken       String?
  resetTokenExpiry DateTime?
  dateInscription  DateTime  @default(now())

  favorites Favorite[] // ðŸ‘ˆ relation ajoutÃ©e

  @@map("users")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  articles Article[]

  @@map("category")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  articleId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId]) // Un utilisateur ne peut pas ajouter deux fois le mÃªme article en favori
  @@map("favorites")
}

enum BlockType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  CODE
  CITATION
  TITRE
  LISTE
  PARAGRAPHE
}
